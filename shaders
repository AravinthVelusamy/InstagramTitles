//CHROMATIC ABBERATION

vec2 uv = vTextureCoord;

float amount = 0.0;

amount = (1.0 + sin(param2*6.0)) * 0.5;
amount *= 1.0 + sin(param2*16.0) * 0.5;
amount *= 1.0 + sin(param2*19.0) * 0.5;
amount *= 1.0 + sin(param2*27.0) * 0.5;
amount = pow(amount, 3.0);

amount *= 0.05;

vec3 col;

col.r = texture2D( sTexture, vec2(uv.x+amount,uv.y) ).r;
col.g = texture2D( sTexture, uv ).g;
col.b = texture2D( sTexture, vec2(uv.x-amount,uv.y) ).b;

col *= (1.0 - amount * 0.5);

gl_FragColor = vec4(col, 1.0f);


// SMOOTH WAVES
float stongth = sin(param2) * 0.5 + 0.5;
vec2 uv = vTextureCoord;
float waveu = sin((uv.y + param2) * 20.0) * 0.5 * 0.05 * stongth;
gl_FragColor = texture2D(sTexture, uv + vec2(waveu, 0));

// REGULAR PREVIEW

gl_FragColor = texture2D(sTexture, vTextureCoord);

// EM INTERFERENCE EFFECT

#extension GL_OES_EGL_image_external : require

precision highp float;
uniform samplerExternalOES sTexture;
varying vec2 vTextureCoord;

const highp vec3 W = vec3(0.2989, 0.5870, 0.1140);
uniform float param; // time
uniform float param2; // voice

float rng2(vec2 seed)
{
    return fract(sin(dot(seed * floor(param2 * 12.), vec2(127.1,311.7))) * 43758.5453123);
}

float rng(float seed)
{
    return rng2(vec2(seed, 1.0));
}

void main() {
    vec2 uv = vTextureCoord;

    vec2 blockS = floor(uv * vec2(24., 9.));
    vec2 blockL = floor(uv * vec2(8., 4.));

    float r = rng2(uv);
    vec3 noise = (vec3(r, 1. - r, r / 2. + 0.5) * 1.0 - 2.0) * 0.08;

    float lineNoise = pow(rng2(blockS), 8.0) * pow(rng2(blockL), 3.0) - pow(rng(7.2341), 17.0) * 2.;

    vec4 col1 = texture2D(sTexture, uv);
    vec4 col2 = texture2D(sTexture, uv + vec2(lineNoise * 0.05 * rng(5.0), 0));
    vec4 col3 = texture2D(sTexture, uv - vec2(lineNoise * 0.05 * rng(31.0), 0));



    gl_FragColor = vec4(vec3(col1.x, col2.y, col3.z) + noise, 1.0);

    //NORMAL PREVIEW
    //gl_FragColor = texture2D(sTexture, vTextureCoord);
}


// RED TAPES

#extension GL_OES_EGL_image_external : require

precision highp float;
uniform samplerExternalOES sTexture;
varying vec2 vTextureCoord;

const highp vec3 W = vec3(0.2989, 0.5870, 0.1140);
uniform float param; // time
uniform float param2; // voice

void main() {
    vec2 pixel = vTextureCoord;

    vec2 adjustedPixel = pixel;
    const float intensity = .1;

    adjustedPixel.y = 0.0;
    adjustedPixel.x = pixel.x;

    vec4 noiseTexture = texture2D( sTexture,adjustedPixel);
    vec4 soundTexture = texture2D( sTexture,adjustedPixel);

    pixel.x += sin(noiseTexture.x * param2) * intensity - .05;
    vec3 videoTexture = texture2D(sTexture, pixel).xyz;
    videoTexture.r -= 1.0 - ((sin(param2 * noiseTexture.y) + 1.0) / 2.);

    videoTexture.g = .2;
    videoTexture.b = .2;

    gl_FragColor = vec4(videoTexture, 1.0);

    //NORMAL PREVIEW
    //gl_FragColor = texture2D(sTexture, vTextureCoord);
}

// BW
#extension GL_OES_EGL_image_external : require

precision highp float;
uniform samplerExternalOES sTexture;
varying vec2 vTextureCoord;

const highp vec3 W = vec3(0.2989, 0.5870, 0.1140);
uniform float param; // time
uniform float param2; // voice

#define steps 2.

void main() {
    vec2 uv = vTextureCoord;

    vec4 c = texture2D(sTexture,uv);
    float g = max(c.r,max(c.g,c.b))*steps;
    float fuck = 345.678+10.0;
    float f = mod((uv.x+uv.y+500.)*sin(param2),1.);
    if(mod(g,1.0)>f)
        c.r = ceil(g);
    else
        c.r = floor(g);
    c.r/=steps;

    gl_FragColor = vec4(c.r, c.r, c.r, c.a);

    //NORMAL PREVIEW
    //gl_FragColor = texture2D(sTexture, vTextureCoord);
}

